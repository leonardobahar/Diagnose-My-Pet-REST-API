Index: user_module/app.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import fs from 'fs';\nimport bodyParser from 'body-parser';\nimport express from 'express';\nimport dotenv from 'dotenv';\nimport cors from 'cors';\nimport path from 'path';\nimport jsonwebtoken from 'jsonwebtoken';\nimport {Dao} from \"./dao\";\nimport {\n    ERROR_DUPLICATE_ENTRY, ERROR_FOREIGN_KEY, NO_SUCH_CONTENT,\n    SOMETHING_WENT_WRONG, SUCCESS,\n    WRONG_BODY_FORMAT\n} from \"../strings\";\nimport {\n    AnimalCategory,\n    AnimalType, Appointment,\n    Disease, Doctor,\n    MedicalRecordAttachment,\n    MedicalRecords, MedicalRecordSymptoms, MedicalRecordTreatmentPlan, Participant,\n    Patient,\n    Symptoms, TreatmentPlan,\n    User\n} from \"../model\";\nimport multer from \"multer\";\nimport moment from \"moment\";\nimport * as util from \"util\";\n\ndotenv.config();\n\nconst app = express()\napp.use(bodyParser.urlencoded({extended: true}))\napp.use(express.json())\n\n// ALLOW ACCESS CONTROL ORIGIN\napp.use(cors())\napp.use((err, req, res, next)=>{\n    if (err){\n        if (err.type === 'entity.parse.failed') {\n            res.status(406).send({\n                success: false,\n                error: 'WRONG-JSON-FORMAT'\n            })\n        }else{\n            res.status(400).send({\n                success: false,\n                error: 'CHECK-SERVER-LOG'\n            })\n            console.error(err)\n        }\n    }\n});\n\nconst PORT = process.env.USER_PORT\nconst host = process.env.MY_SQL_HOST\nconst user = process.env.MY_SQL_USER\nconst password = typeof process.env.MY_SQL_PASSWORD === 'undefined' ? '' : process.env.MY_SQL_PASSWORD\nconst dbname = process.env.MY_SQL_DBNAME\nconst UPLOADPATH = process.env.UPLOAD_PATH\nconst dao = new Dao(host, user, password, dbname)\n\nconst storage=multer.diskStorage({\n    destination: './Uploads/',\n    filename: function (req,file,cb){\n        cb(null,file.fieldname + '-' + Date.now() + path.extname(file.originalname))\n    }\n})\n\nconst medicalRecordFilter = (req, file, cb)=>{\n    // Accept images only\n    if (!file.originalname.match(/\\.(jpg|JPG|jpeg|JPEG|png|PNG|gif|GIF|doc|docx|pdf|txt|xls|csv|xlsx)$/)) {\n        req.fileValidationError = 'Only jpg, png, gif, doc, pdf, txt, xls, csv files are allowed!';\n        return cb(new Error('Only jpg, png, gif, doc, pdf, txt, xls, csv files are allowed!'), false);\n    }\n    cb(null, true);\n}\n\napp.get(\"/api/user/retrieve-users\", (req, res)=>{\n    if (typeof req.query.id === 'undefined'){\n        // RETRIEVE ALL\n        dao.retrieveUsers().then(result=>{\n            res.status(200).send({\n                success: true,\n                result: result\n            })\n        }).catch(err=>{\n            console.error(err)\n            res.status(500).send({\n                success: false,\n                error: SOMETHING_WENT_WRONG\n            })\n        })\n    }else{\n        // RETRIEVE WITH ID\n        const user=new User(req.query.id,null,null,null,null,null,null,null)\n\n        dao.retrieveOneUser(user).then(result=>{\n            res.status(200).send({\n                success:true,\n                result:result\n            })\n        }).catch(err=>{\n            console.error(err)\n            res.status(500).send({\n                success:false,\n                error:SOMETHING_WENT_WRONG\n            })\n        })\n    }\n})\n\napp.post(\"/api/user/register-user\", (req, res)=>{\n    if (typeof req.body.user_name === 'undefined' ||\n        typeof req.body.mobile === 'undefined' ||\n        typeof req.body.email === 'undefined' ||\n        typeof req.body.birthdate === 'undefined' ||\n        typeof req.body.address === 'undefined' ||\n        typeof req.body.password === 'undefined'){\n        res.status(400).send({\n            success: false,\n            error: WRONG_BODY_FORMAT\n        })\n        return\n    }else{\n        const user = new User(null,\n            req.body.user_name,\n            req.body.mobile,\n            req.body.email,\n            req.body.birthdate,\n            req.body.address,\n            req.body.password,\n            null,\n            'CUSTOMER')\n\n        dao.registerUser(user).then(result=>{\n            res.status(200).send({\n                success: true,\n                result: result\n            })\n        }).catch(err=>{\n            if (err.code === 'ER_DUP_ENTRY') {\n                res.status(500).send({\n                    success: false,\n                    error: 'DUPLICATE-ENTRY'\n                })\n                res.end()\n            }else{\n                console.error(err)\n                res.status(500).send({\n                    success: false,\n                    error: SOMETHING_WENT_WRONG\n                })\n            }\n        })\n    }\n})\n\napp.post(\"/api/user/reset-user\", (req, res)=>{\n    if (typeof req.body.email === 'undefined' ||\n        typeof req.body.password === 'undefined'){\n        res.status(400).send({\n            success: false,\n            error: WRONG_BODY_FORMAT\n        })\n        return\n    }else{\n        const user = new User(null,\n            null,\n            null,\n            req.body.email,\n            null,\n            null,\n            req.body.password,\n            null,\n            'CUSTOMER')\n\n        dao.resetPassword(user).then(result=>{\n            res.status(200).send({\n                success: true,\n                result: result\n            })\n        }).catch(err=>{\n            if (err.code === 'ER_DUP_ENTRY') {\n                res.status(500).send({\n                    success: false,\n                    error: 'DUPLICATE-ENTRY'\n                })\n                res.end()\n            }else{\n                console.error(err)\n                res.status(500).send({\n                    success: false,\n                    error: SOMETHING_WENT_WRONG\n                })\n            }\n        })\n    }\n})\n\napp.post(\"/api/user/register-admin\",(req,res)=>{\n    if (typeof req.body.user_name === 'undefined' ||\n        typeof req.body.mobile === 'undefined' ||\n        typeof req.body.email === 'undefined' ||\n        typeof req.body.birthdate === 'undefined' ||\n        typeof req.body.address === 'undefined' ||\n        typeof req.body.password === 'undefined'){\n        res.status(400).send({\n            success: false,\n            error: WRONG_BODY_FORMAT\n        })\n        return\n    }else{\n        const user = new User(null,\n            req.body.user_name,\n            req.body.mobile,\n            req.body.email,\n            req.body.birthdate,\n            req.body.address,\n            req.body.password,\n            null,\n            'ADMIN')\n\n        dao.registerUser(user).then(result=>{\n            res.status(200).send({\n                success: true,\n                result: result\n            })\n        }).catch(err=>{\n            if (err.code === 'ER_DUP_ENTRY') {\n                res.status(500).send({\n                    success: false,\n                    error: 'DUPLICATE-ENTRY'\n                })\n                res.end()\n            }else{\n                console.error(err)\n                res.status(500).send({\n                    success: false,\n                    error: SOMETHING_WENT_WRONG\n                })\n            }\n        })\n    }\n})\n\napp.post(\"/api/user/confirm-user-email\",(req,res)=>{\n    if(typeof req.body.id==='undefined'){\n        res.status(400).send({\n            success:false,\n            error:WRONG_BODY_FORMAT\n        })\n        return\n    }\n\n    dao.retrieveUserId(new User(req.body.id)).then(result=>{\n        dao.confirmUserEmail(new User(req.body.id)).then(result=>{\n            res.status(200).send({\n                success:true,\n                result:result\n            })\n        }).catch(error=>{\n            console.error(error)\n            res.status(500).send({\n                success:false,\n                error:SOMETHING_WENT_WRONG\n            })\n        })\n    }).catch(error=>{\n        if(error===NO_SUCH_CONTENT){\n            res.status(204).send({\n                success:false,\n                error:NO_SUCH_CONTENT\n            })\n            return\n        }\n        console.error(error)\n        res.status(500).send({\n            success:false,\n            error:SOMETHING_WENT_WRONG\n        })\n    })\n})\n\napp.post(\"/api/user/user-login\",(req,res)=>{\n    /*if(typeof req.body.user_name==='undefined' &&\n       typeof req.body.password==='undefined' ||\n        typeof req.body.email==='undefined'){\n        res.status(400).send({\n            success:false,\n            error:WRONG_BODY_FORMAT\n        })\n        return\n    }*/\n\n    if(typeof req.body.email!=='undefined'){\n        const user=new User(null,null,null,req.body.email,null,null,req.body.password,null)\n        dao.loginWithEmail(user).then(LoginResult=>{\n            dao.userLastSignIn(LoginResult[0].user_id).then(result=>{\n                res.status(200).send({\n                    success: true,\n                    authentication_approval: true,\n                    message: 'Log in Successful',\n                    result:LoginResult\n                })\n            }).catch(error=>{\n                console.error(error)\n                res.status(500).send({\n                    success:false,\n                    error:SOMETHING_WENT_WRONG\n                })\n            })\n        }).catch(error=>{\n            if(error===NO_SUCH_CONTENT){\n                res.status(200).send({\n                    success:false,\n                    authentication_approval: false,\n                    message:'Invalid User Name/Password'\n                })\n            }\n            console.error(error)\n            res.status(500).send({\n                success:false,\n                error:SOMETHING_WENT_WRONG\n            })\n        })\n        return\n    }\n    const user=new User(null,req.body.user_name,null,null,null,null,req.body.password,null)\n    dao.loginCustomer(user).then(loginResult=> {\n        dao.userLastSignIn(loginResult[0].user_id).then(result=>{\n            res.status(200).send({\n                success: true,\n                authentication_approval: true,\n                message: 'Log in Successful',\n                result:loginResult\n            })\n        }).catch(error=>{\n            console.error(error)\n            res.status(500).send({\n                success:false,\n                error:SOMETHING_WENT_WRONG\n            })\n        })\n    }).catch(error=>{\n        if(error===NO_SUCH_CONTENT){\n            res.status(200).send({\n                success:false,\n                authentication_approval: false,\n                message:'Invalid User Name/Password'\n            })\n        }\n        console.error(error)\n        res.status(500).send({\n            success:false,\n            error:SOMETHING_WENT_WRONG\n        })\n    })\n})\n\napp.post(\"/api/user/update-user\",(req,res)=>{\n    if(typeof req.body.id ==='undefined' ||\n        typeof req.body.user_name === 'undefined' ||\n        typeof req.body.mobile === 'undefined' ||\n        typeof req.body.email === 'undefined' ||\n        typeof req.body.birthdate === 'undefined' ||\n        typeof req.body.address === 'undefined'){\n        res.status(400).send({\n            success: false,\n            error: WRONG_BODY_FORMAT\n        })\n        return\n    }\n\n    const user=new User(req.body.id,\n        req.body.user_name,\n        req.body.mobile,\n        req.body.email,\n        req.body.birthdate,\n        req.body.address)\n\n    dao.retrieveOneUser(new User(req.body.id)).then(result=>{\n        dao.updateCustomer(user).then(result=>{\n            res.status(200).send({\n                success:true,\n                result:result\n            })\n        }).catch(err=>{\n            console.error(err)\n            res.status(500).send({\n                success: false,\n                result: SOMETHING_WENT_WRONG\n            })\n        })\n    }).catch(error=>{\n        if(error===NO_SUCH_CONTENT){\n            res.status(204).send({\n                success:false,\n                error:NO_SUCH_CONTENT\n            })\n            return\n        }\n\n        console.error(error)\n        res.status(500).send({\n            success:false,\n            error:SOMETHING_WENT_WRONG\n        })\n    })\n})\n\napp.post(\"/api/user/change-password\",(req,res)=>{\n    if(typeof req.body.email==='undefined' ||\n       typeof req.body.password==='undefined'){\n        res.status(400).send({\n            success:false,\n            error:WRONG_BODY_FORMAT\n        })\n        return\n    }\n\n    const user = new User(null,null,req.body.email,null,null,null,req.body.password,null)\n    dao.changeCustomerPassword(user).then(result=>{\n        res.status(200).send({\n            success:true,\n            result:result\n        })\n    }).catch(error=>{\n        console.error(error)\n        res.status(500).send({\n            success:false,\n            error:SOMETHING_WENT_WRONG\n        })\n    })\n})\n\napp.delete(\"/api/user/delete-user\",(req,res)=>{\n    if(typeof req.body.id==='undefined'){\n        res.status(400).send({\n            success:false,\n            result:SOMETHING_WENT_WRONG\n        })\n        return\n    }\n    const user=new User(req.body.id,null,null,null,null,null,null,null)\n    dao.deleteCustomer(user).then(result=>{\n        res.status(200).send({\n            success:true,\n            result:result\n        })\n    }).catch(err=>{\n        console.error(err)\n        res.status(500).send({\n            success: false,\n            result: SOMETHING_WENT_WRONG\n        })\n    })\n})\n\napp.get(\"/api/user/retrieve-doctor\",(req,res)=>{\n    if(typeof req.query.id==='undefined'){\n        dao.retrieveDoctor().then(result=>{\n            res.status(200).send({\n                success:true,\n                result:result\n            })\n        }).catch(error=>{\n            console.error(error)\n            res.status(500).send({\n                success:false,\n                error:SOMETHING_WENT_WRONG\n            })\n        })\n        return\n    }\n\n    dao.retrieveOneDoctor(new Doctor(req.query.id)).then(result=>{\n        res.status(200).send({\n            success:true,\n            result:result\n        })\n    }).catch(error=>{\n        if(error===NO_SUCH_CONTENT){\n            res.status(204).send({\n                success:false,\n                error:NO_SUCH_CONTENT\n            })\n            return\n        }\n        console.error(error)\n        res.status(500).send({\n            success:false,\n            error:SOMETHING_WENT_WRONG\n        })\n    })\n})\n\napp.post(\"/api/user/register-doctor\",(req,res)=>{\n    if (typeof req.body.user_name === 'undefined' ||\n        typeof req.body.mobile === 'undefined' ||\n        typeof req.body.email === 'undefined' ||\n        typeof req.body.birthdate === 'undefined' ||\n        typeof req.body.password === 'undefined' ||\n        typeof req.body.address==='undefined'){\n        res.status(400).send({\n            success: false,\n            error: WRONG_BODY_FORMAT\n        })\n        return\n    }else{\n        const user = new User(null,\n            req.body.user_name,\n            req.body.mobile,\n            req.body.email,\n            req.body.birthdate,\n            req.body.address,\n            req.body.password,\n            null,\n            'DOCTOR')\n\n        dao.registerUser(user).then(customerResult=>{\n            dao.registerDoctor(new Doctor(null,req.body.user_name,customerResult.id)).then(result=>{\n                res.status(200).send({\n                    success:true,\n                    result:result\n                })\n            }).catch(error=>{\n                console.error(error)\n                res.status(500).send({\n                    success:false,\n                    error:SOMETHING_WENT_WRONG\n                })\n            })\n        }).catch(err=>{\n            if (err.code === 'ER_DUP_ENTRY') {\n                res.status(500).send({\n                    success: false,\n                    error: 'DUPLICATE-ENTRY'\n                })\n                res.end()\n            }else{\n                console.error(err)\n                res.status(500).send({\n                    success: false,\n                    error: SOMETHING_WENT_WRONG\n                })\n            }\n        })\n    }\n})\n\napp.delete(\"/api/user/delete-doctor\",(req,res)=>{\n    if(typeof req.query.id==='undefined'){\n        res.status(400).send({\n            success:false,\n            error:WRONG_BODY_FORMAT\n        })\n        return\n    }\n\n    dao.retrieveOneDoctor(new Doctor(req.query.id)).then(result=>{\n        dao.deleteDoctor(new Doctor(req.query.id)).then(result=>{\n            dao.deleteCustomer(new User(req.query.id)).then(result=>{\n                res.status(200).send({\n                    success:true,\n                    result:result\n                })\n            }).catch(error=>{\n                console.error(error)\n                res.status(500).send({\n                    success:false,\n                    error:SOMETHING_WENT_WRONG\n                })\n            })\n        }).catch(error=>{\n            console.error(error)\n            res.status(500).send({\n                success:false,\n                error:SOMETHING_WENT_WRONG\n            })\n        })\n    }).catch(error=>{\n        if(error===NO_SUCH_CONTENT){\n            res.status(204).send({\n                success:false,\n                error:NO_SUCH_CONTENT\n            })\n            return\n        }\n\n        console.error(error)\n        res.status(500).send({\n            success:false,\n            error:SOMETHING_WENT_WRONG\n        })\n    })\n})\n\napp.get(\"/api/user/retrieve-patient\",(req,res)=>{\n    if(typeof req.query.id==='undefined' &&\n       typeof req.query.owner_id==='undefined'&&\n        typeof req.query.age==='undefined'){\n        dao.retrievePatient().then(result=>{\n            res.status(200).send({\n                success: true,\n                result: result\n            })\n            //res.sendFile(__dirname+result.picture)\n        }).catch(err=>{\n            console.error(err)\n            res.status(500).send({\n                success: false,\n                error: SOMETHING_WENT_WRONG\n            })\n        })\n    }else if(typeof req.query.id==='undefined' &&\n             typeof req.query.owner_id!=='undefined'&&\n             typeof req.query.age==='undefined'){\n        dao.retrievePatientsByOwnerId(req.query.owner_id).then(result=>{\n            res.status(200).send({\n                success:true,\n                result:result\n            })\n        }).catch(error=>{\n            if(error===NO_SUCH_CONTENT){\n                res.status(204).send({\n                    success:false,\n                    error:NO_SUCH_CONTENT\n                })\n                return\n            }\n            console.error(error)\n            res.status(500).send({\n                success:false,\n                error:SOMETHING_WENT_WRONG\n            })\n        })\n    }else if(typeof req.query.id==='undefined' &&\n             typeof req.query.owner_id==='undefined' &&\n             typeof req.query.age!=='undefined'){\n\n        let birthDate=new Date()\n        birthDate.setFullYear(birthDate.getFullYear()-req.query.age)\n        const finalDate=moment(birthDate, 'YYYY-MM-DDTHH:mm:ssZ').format('YYYY-MM-DD')\n        console.log(finalDate)\n\n        dao.retrievePatientByBirthDate(finalDate).then(result=>{\n            res.status(200).send({\n                success:true,\n                result\n            })\n        }).catch(error=>{\n            if(error===NO_SUCH_CONTENT){\n                res.status(204).send({\n                    success:false,\n                    error:NO_SUCH_CONTENT\n                })\n                return\n            }\n            console.error(error)\n            res.status(500).send({\n                success:false,\n                error:SOMETHING_WENT_WRONG\n            })\n        })\n    } else{\n        const patient=new Patient(req.query.id,null,null,null)\n\n        dao.retrieveOnePatient(patient).then(result=>{\n            res.status(200).send({\n                success:true,\n                result:result\n            })\n        }).catch(err=>{\n            if(err===NO_SUCH_CONTENT){\n                res.status(204).send({\n                    success:false,\n                    error:NO_SUCH_CONTENT\n                })\n                return\n            }\n            console.error(err)\n            res.status(500).send({\n                success:false,\n                error:SOMETHING_WENT_WRONG\n            })\n        })\n    }\n})\n\napp.get(\"/api/user/retrieve-patient-picture\",(req,res)=>{\n    if(typeof req.query.id==='undefined'){\n        res.status(404).send({\n            success:false,\n            error:WRONG_BODY_FORMAT\n        })\n        return\n    }\n\n    dao.retrievePatientPicture(new Patient(req.query.id)).then(result=>{\n        if(result==='No Attachment'){\n            res.status(204).send('No Attachment')\n            return\n        }\n        //res.status(200).sendFile('C:/xampp/htdocs/BaharTech/Diagnose-My-Pet-REST-API/'+'/Uploads/'+result)\n        res.status(200).sendFile(UPLOADPATH+result)\n    }).catch(error=>{\n        if(error===NO_SUCH_CONTENT){\n            res.status(204).send({\n                success:false,\n                error:NO_SUCH_CONTENT\n            })\n            return\n        }\n        console.error(error)\n        res.status(500).send({\n            success:false,\n            error:SOMETHING_WENT_WRONG\n        })\n    })\n})\n\napp.post(\"/api/user/add-patient\",async (req,res)=>{\n    const upload=multer({storage:storage, fileFilter: medicalRecordFilter}).single('patient_attachment')\n\n    upload(req,res, async(error)=>{\n        if (typeof req.body.patient_name === 'undefined' ||\n            typeof req.body.animal_type === 'undefined' ||\n            typeof req.body.age==='undefined' ||\n            typeof req.body.pet_owner === 'undefined'){\n            res.status(400).send({\n                success: false,\n                error: WRONG_BODY_FORMAT\n            })\n            return\n        }\n\n        if(typeof req.file==='undefined'){\n\n            let birthDate=new Date()\n            birthDate.setFullYear(birthDate.getFullYear()-req.body.age)\n            console.log(birthDate)\n\n            const patient = new Patient(\n                null,req.body.patient_name.toUpperCase(),\n                req.body.animal_type,req.body.breed.toUpperCase(),\n                birthDate,req.body.pet_owner,'No Attachment')\n\n            dao.registerPatient(patient).then(result=>{\n                res.status(200).send({\n                    success: true,\n                    result: result\n                })\n            }).catch(err=>{\n                if (err.code === 'ER_DUP_ENTRY') {\n                    res.status(500).send({\n                        success: false,\n                        error: 'DUPLICATE-ENTRY'\n                    })\n                    res.end()\n                }else{\n                    console.error(err)\n                    res.status(500).send({\n                        success: false,\n                        error: SOMETHING_WENT_WRONG\n                    })\n                }\n            })\n        }else{\n            if(error instanceof multer.MulterError){\n                return res.send(error)\n            } else if(error){\n                return res.send(error)\n            }\n\n            let birthDate=new Date()\n            birthDate.setFullYear(birthDate.getFullYear()-req.body.age)\n\n            const patient = new Patient(\n                null,req.body.patient_name.toUpperCase(),\n                req.body.animal_type,req.body.breed.toUpperCase(),\n                birthDate,req.body.pet_owner,req.file.filename)\n\n            dao.registerPatient(patient).then(result=>{\n                res.status(200).send({\n                    success: true,\n                    result: result\n                })\n            }).catch(err=>{\n                if (err.code === 'ER_DUP_ENTRY') {\n                    res.status(500).send({\n                        success: false,\n                        error: 'DUPLICATE-ENTRY'\n                    })\n                    res.end()\n                }else{\n                    console.error(err)\n                    res.status(500).send({\n                        success: false,\n                        error: SOMETHING_WENT_WRONG\n                    })\n                }\n            })\n        }\n    })\n})\n\napp.post(\"/api/user/update-patient\",async (req,res)=>{\n    const upload=multer({storage:storage, fileFilter: medicalRecordFilter}).single('patient_attachment')\n\n    upload(req,res, async(error)=>{\n        if(typeof req.body.id ==='undefined' ||\n            typeof req.body.patient_name === 'undefined' ||\n            typeof req.body.animal_type === 'undefined' ||\n            typeof req.body.age=== 'undefined' ||\n            typeof req.body.pet_owner === 'undefined'){\n            res.status(400).send({\n                success: false,\n                error: WRONG_BODY_FORMAT\n            })\n            return\n        }\n\n        if(typeof req.file==='undefined'){\n            let birthDate=new Date()\n            birthDate.setFullYear(birthDate.getFullYear()-req.body.age)\n\n            const patient=new Patient(req.body.id,req.body.patient_name.toUpperCase(),req.body.animal_type,\n                req.body.breed.toUpperCase(),birthDate,req.body.pet_owner,'No Attachment')\n\n            dao.updatePatient(patient).then(result=>{\n                res.status(200).send({\n                    success:true,\n                    result:result\n                })\n            }).catch(err=>{\n                console.error(err)\n                res.status(500).send({\n                    success: false,\n                    error: SOMETHING_WENT_WRONG\n                })\n            })\n        }else{\n            if(error instanceof multer.MulterError){\n                return res.send(error)\n            } else if(error){\n                return res.send(error)\n            }\n\n            let birthDate=new Date()\n            birthDate.setFullYear(birthDate.getFullYear()-req.body.age)\n\n            const patient=new Patient(req.body.id,req.body.patient_name.toUpperCase(),req.body.animal_type,\n                req.body.breed.toUpperCase(),birthDate,req.body.pet_owner,req.file.filename)\n\n            dao.updatePatient(patient).then(result=>{\n                res.status(200).send({\n                    success:true,\n                    result:result\n                })\n            }).catch(err=>{\n                console.error(err)\n                res.status(500).send({\n                    success: false,\n                    error: SOMETHING_WENT_WRONG\n                })\n            })\n        }\n    })\n})\n\napp.delete(\"/api/user/delete-patient\",(req,res)=>{\n    if(typeof req.query.id==='undefined'){\n        res.status(500).send({\n            success:false,\n            error:SOMETHING_WENT_WRONG\n        })\n        return\n    }\n\n    const patient=new Patient(req.query.id,null,null,null,null)\n    dao.deletePatient(patient).then(result=>{\n        res.status(200).send({\n            success:true,\n            result:SUCCESS\n        })\n    }).catch(err=>{\n        console.error(err)\n        res.status(500).send({\n            success: false,\n            error: SOMETHING_WENT_WRONG\n        })\n    })\n})\n\napp.post(\"/api/user/bind-user-to-pet\", (req,res)=>{\n    if(typeof req.body.user_id === 'undefined' ||\n        typeof req.body.patient_id === 'undefined'){\n        res.status(400).send({\n            success:false,\n            error:WRONG_BODY_FORMAT\n        })\n        return\n    }\n\n    dao.bindUserToPet(new User(req.body.user_id), new Patient(req.body.patient_id)).then(result=>{\n        res.status(200).send({\n            success: true,\n            result: result\n        })\n    }).catch(err=>{\n        if (err.code === 'ER_DUP_ENTRY' || err === ERROR_DUPLICATE_ENTRY) {\n            res.status(500).send({\n                success: false,\n                error: 'DUPLICATE-ENTRY'\n            })\n            res.end()\n        }else if(err.code === 'ER_NO_REFERENCED_ROW_2') {\n            res.status(500).send({\n                success: false,\n                error: ERROR_FOREIGN_KEY\n            })\n        }else{\n            console.error(err)\n            res.status(500).send({\n                success: false,\n                error: SOMETHING_WENT_WRONG\n            })\n        }\n    })\n})\n\napp.get(\"/api/user/retrieve-medical-record\",(req,res)=>{\n    if(typeof req.query.patient_id==='undefined'){\n        dao.retrieveMedicalRecord().then(result=>{\n            res.status(200).send({\n                success:true,\n                result:result\n            })\n        }).catch(err=>{\n            console.error(err)\n            res.status(500).send({\n                success:false,\n                error:SOMETHING_WENT_WRONG\n            })\n        })\n    }else {\n        const record=new MedicalRecords(null,req.query.patient_id,null,null)\n        dao.retrieveOneMedicalRecord(record).then(result=>{\n            res.status(200).send({\n                success:true,\n                result:result\n            })\n        }).catch(err=>{\n            console.error(err)\n            res.status(500).send({\n                success:false,\n                error:SOMETHING_WENT_WRONG\n            })\n        })\n    }\n})\n\napp.post(\"/api/user/add-medical-record\", (req,res)=>{\n    if(typeof req.body.patient_id === 'undefined'){\n        res.status(400).send({\n            success:false,\n            error:WRONG_BODY_FORMAT\n        })\n        return\n    }\n\n    const medical=new MedicalRecords(null,req.body.patient_id, 'NOW','NEW')\n    dao.addMedicalRecord(medical).then(result=>{\n        res.status(200).send({\n            success:true,\n            result:result\n        })\n    }).catch(err=>{\n        if(err.code==='ER_DUP_ENTRY'){\n            res.status(500).send({\n                success:false,\n                error:ERROR_DUPLICATE_ENTRY\n            })\n        }else{\n            console.error(err)\n            res.status(500).send({\n                success:false,\n                error:SOMETHING_WENT_WRONG\n            })\n        }\n    })\n})\n\napp.post(\"/api/user/update-medical-record\",(req,res)=>{\n    if( typeof req.body.id === 'undefined' ||\n        typeof req.body.patient_id === 'undefined'){\n        res.status(400).send({\n            success:false,\n            error:WRONG_BODY_FORMAT\n        })\n        return\n    }\n\n    const medical=new MedicalRecords(req.body.id,req.body.patient_id,'NOW','UPDATED')\n    dao.updateMedicalRecord(medical).then(result=>{\n        res.status(200).send({\n            success:true,\n            result:result\n        })\n    }).catch(err=>{\n        if(err.code==='ER_DUP_ENTRY'){\n            res.status(500).send({\n                success:false,\n                error:ERROR_DUPLICATE_ENTRY\n            })\n        }else{\n            console.error(err)\n            res.status(500).send({\n                success:false,\n                error:SOMETHING_WENT_WRONG\n            })\n        }\n    })\n})\n\napp.delete(\"/api/user/delete-medical-record\", (req,res)=>{\n    if(typeof req.query.id === 'undefined'){\n        res.status(400).send({\n            success:false,\n            error:WRONG_BODY_FORMAT\n        })\n        return\n    }\n\n    const medical=new MedicalRecords(req.query.id, null, null,null)\n    dao.deleteMedicalRecord(medical).then(result=>{\n        res.status(200).send({\n            success:true,\n            result:result\n        })\n    }).catch(err=>{\n        if(err.code==='ER_DUP_ENTRY'){\n            res.status(500).send({\n                success:false,\n                error:ERROR_DUPLICATE_ENTRY\n            })\n        }else{\n            console.error(err)\n            res.status(500).send({\n                success:false,\n                error:SOMETHING_WENT_WRONG\n            })\n        }\n    })\n})\n\n// STARTING FROM THIS LINE COMES ENDPOINTS WHICH HANDLES FILE\n\n/* MAKE /api/diagnosis/attach-medical-records\n / Pass query medical_record_id, filename\n */\n\napp.get(\"/api/user/retrieve-medical-attachment\", (req,res)=>{\n    if(typeof req.query.file_name==='undefined'){\n        dao.retrieveMedicalRecordAttachment().then(result=>{\n            res.status(200).send({\n                success:true,\n                result:result\n            })\n        }).catch(err=>{\n            if(err.code==='ER_DUP_ENTRY'){\n                res.status(500).send({\n                    success:false,\n                    error:ERROR_DUPLICATE_ENTRY\n                })\n            }else{\n                res.status(500).send({\n                    success:false,\n                    error:SOMETHING_WENT_WRONG\n                })\n            }\n        })\n    }else{\n        const record=new MedicalRecordAttachment(null,null,req.query.file_name)\n        dao.retrieveOneMedicalRecordAttachment(record).then(result=>{\n            res.status(200).send({\n                success:true,\n                result:result\n            })\n        }).catch(err=>{\n            if(err.code==='ER_DUP_ENTRY'){\n                res.status(500).send({\n                    success:false,\n                    error:ERROR_DUPLICATE_ENTRY\n                })\n            }else{\n                res.status(500).send({\n                    success:false,\n                    error:SOMETHING_WENT_WRONG\n                })\n            }\n        })\n    }\n})\n\napp.post(\"/api/user/attach-medical-records\", async(req,res)=>{\n    const upload=multer({storage:storage, fileFilter: medicalRecordFilter}).single('mc_attachment')\n\n    upload(req,res, async(err)=>{\n\n        if(typeof req.query.medical_record_id === 'undefined' ||\n            typeof req.file.filename === 'undefined'){\n            res.status(400).send({\n                success:false,\n                error:WRONG_BODY_FORMAT\n            })\n            return\n        }\n\n        if(err instanceof multer.MulterError){\n            return res.send(err)\n        }\n\n        else if(err){\n            return res.send(err)\n        }\n\n        console.log(req.file.filename)\n\n        const attachment = new MedicalRecordAttachment(null,req.query.medical_record_id, req.file.filename)\n        dao.addMedicalRecordAttachment(attachment).then(result=>{\n            res.status(200).send({\n                success:true,\n                result:result\n            })\n        }).catch(err=>{\n            if (err.code === 'ER_DUP_ENTRY') {\n                res.status(500).send({\n                    success: false,\n                    error: 'DUPLICATE-ENTRY'\n                })\n                res.end()\n            }else{\n                console.error(err)\n                res.status(500).send({\n                    success: false,\n                    error: SOMETHING_WENT_WRONG\n                })\n            }\n        })\n    })\n})\n\napp.post(\"/api/user/update-medical-attachment\",async(req,res)=>{\n    const upload=multer({storage:storage, fileFilter:medicalRecordFilter}).single('mc_attachment')\n\n    upload(req,res, async(err)=>{\n\n        console.log(req.query.medical_record_id)\n        console.log(req.file.filename)\n\n        if(typeof req.query.medical_record_id === 'undefined' ||\n            typeof req.file.filename === 'undefined'){\n            res.status(400).send({\n                success:false,\n                error:WRONG_BODY_FORMAT\n            })\n            return\n        }\n\n        if(err instanceof multer.MulterError){\n            return res.send(err)\n        }\n\n        else if(err){\n            return res.send(err)\n        }\n\n        console.log(req.file.filename)\n\n        const attachment=new MedicalRecordAttachment(req.query.id,req.query.medical_record_id,req.file.filename)\n        dao.updateMedicalRecordAttachment(attachment).then(result=>{\n            res.status(200).send({\n                success:true,\n                result:result\n            })\n        }).catch(err=>{\n            if(err.code==='ER_DUP_ENTRY'){\n                res.status(500).send({\n                    success:false,\n                    error:ERROR_DUPLICATE_ENTRY\n                })\n                res.end()\n            }else{\n                console.error(err)\n                res.status(500).send({\n                    success:false,\n                    error:SOMETHING_WENT_WRONG\n                })\n            }\n        })\n    })\n})\n\napp.delete(\"/api/user/delete-medical-attachment\",(req,res)=>{\n    if(typeof req.query.id==='undefined'){\n        res.status(400).send({\n            success:false,\n            error:WRONG_BODY_FORMAT\n        })\n        return\n    }\n\n    const attachment=new MedicalRecordAttachment(req.query.id,null,null)\n\n    dao.getAttachmentFileName(attachment).then(result=>{\n\n        fs.unlinkSync('./Uploads/'+result.toString())\n\n        dao.deleteMedicalRecordAttachment(attachment).then(result=>{\n            res.status(200).send({\n                success:true,\n                result:SUCCESS\n            })\n        }).catch(err=>{\n            console.error(err)\n            res.status(500).send({\n                success:false,\n                error:SOMETHING_WENT_WRONG\n            })\n        })\n    }).catch(err=>{\n        if(err===NO_SUCH_CONTENT){\n            res.status(204).send({\n                success:false,\n                error:NO_SUCH_CONTENT\n            })\n        }\n        else{\n            console.error(err)\n            res.status(500).send({\n                success:false,\n                error:SOMETHING_WENT_WRONG\n            })\n        }\n    })\n})\n\napp.get(\"/api/user/retrieve-medical-record-symptoms\",(req,res)=>{\n    if(typeof req.query.medical_record_id==='undefined'){\n        dao.retrieveMedicalRecordSymptoms().then(result=>{\n            res.status(200).send({\n                success:true,\n                result:result\n            })\n        }).catch(err=>{\n            console.error(err)\n            res.status(500).send({\n                success:false,\n                error:SOMETHING_WENT_WRONG\n            })\n        })\n    }else{\n        const record=new MedicalRecordSymptoms(null,req.query.medical_record_id,null)\n        dao.retrieveOneMedicalRecordSymptoms(record).then(result=>{\n            res.status(200).send({\n                success:true,\n                result:result\n            })\n        }).catch(err=>{\n            console.error(err)\n            res.status(500).send({\n                success:false,\n                error:SOMETHING_WENT_WRONG\n            })\n        })\n    }\n})\n\napp.post(\"/api/user/add-medical-record-symptoms\",(req,res)=>{\n    if(typeof req.body.medical_record_id==='undefined' ||\n       typeof req.body.symptoms_id==='undefined'){\n        res.status(400).send({\n            success:false,\n            error:WRONG_BODY_FORMAT\n        })\n        return\n    }\n\n    dao.bindMedicalRecordWithSymptoms(new MedicalRecords(req.body.medical_record_id),new Symptoms(req.body.symptoms_id)).then(result=>{\n        res.status(200).send({\n            success:true,\n            result:result\n        })\n    }).catch(err=>{\n        console.error(err)\n        res.status(500).send({\n            success:false,\n            error:SOMETHING_WENT_WRONG\n        })\n    })\n})\n\napp.delete(\"/api/user/delete-medical-record-symptoms\",(req,res)=>{\n    if(typeof req.query.id==='undefined'){\n        res.status(400).send({\n            success:false,\n            error:WRONG_BODY_FORMAT\n        })\n        return\n    }\n\n    dao.unbindMedicalRecordWithSymptoms(req.query.id).then(result=>{\n        res.status(200).send({\n            success:true,\n            result:result\n        })\n    }).catch(err=>{\n        console.error(err)\n        res.status(500).send({\n            success:false,\n            error:SOMETHING_WENT_WRONG\n        })\n    })\n})\n\napp.get(\"/api/user/retrieve-medical-record-treatment-plan\",(req,res)=>{\n    if(typeof req.query.medical_record_id==='undefined'){\n        dao.retrieveMedicalRecordTreatmentPlan().then(result=>{\n            res.status(200).send({\n                success:true,\n                result:result\n            })\n        }).catch(err=>{\n            console.error(err)\n            res.status(500).send({\n                success:false,\n                error:SOMETHING_WENT_WRONG\n            })\n        })\n    }else{\n        const record=new MedicalRecordTreatmentPlan(null,req.query.medical_record_id,null)\n        dao.retrieveOneMedicalRecordTreatmentPlan(record).then(result=>{\n            res.status(200).send({\n                success:true,\n                result:result\n            })\n        }).catch(err=>{\n            console.error(err)\n            res.status(500).send({\n                success:false,\n                error:SOMETHING_WENT_WRONG\n            })\n        })\n    }\n})\n\napp.post(\"/api/user/add-medical-record-treatment-plan\",(req,res)=>{\n    if(typeof req.body.medical_record_id==='undefined'||\n       typeof req.body.treatment_plan_id==='undefined'){\n        res.status(400).send({\n            success:false,\n            error:WRONG_BODY_FORMAT\n        })\n        return\n    }\n\n    dao.bindMedicalRecordToTreatmentPlan(new MedicalRecords(req.body.medical_record_id),new TreatmentPlan(req.body.treatment_plan_id)).then(result=>{\n        res.status(200).send({\n            success:true,\n            result:result\n        })\n    }).catch(err=>{\n        console.error(err)\n        res.status(500).send({\n            success:false,\n            error:SOMETHING_WENT_WRONG\n        })\n    })\n})\n\napp.delete(\"/api/user/delete-medical-record-treatment-plan\", (req,res)=>{\n    if(typeof req.query.id==='undefined'){\n        res.status(400).send({\n            success:false,\n            error:WRONG_BODY_FORMAT\n        })\n        return\n    }\n\n    dao.unbindMedicalRecordWithTreatmentPlan(req.query.id).then(result=>{\n        res.status(200).send({\n            success:true,\n            result:result\n        })\n    }).catch(err=>{\n        console.error(err)\n        res.status(500).send({\n            success:false,\n            error:SOMETHING_WENT_WRONG\n        })\n    })\n})\n\napp.get(\"/api/user/retrieve-appointment\", (req,res)=>{\n    if(typeof req.query.id==='undefined' &&\n       typeof req.query.doctor_id==='undefined' &&\n        typeof req.query.date1 ==='undefined' &&\n        typeof req.query.date2 ==='undefined' &&\n        typeof req.query.doctor_name==='undefined'){\n        dao.retrieveAppointment().then(result=>{\n            res.status(200).send({\n                success:true,\n                result:result\n            })\n        }).catch(err=>{\n            console.error(err)\n            res.status(500).send({\n                success:false,\n                error:SOMETHING_WENT_WRONG\n            })\n        })\n    }else if(typeof req.query.doctor_id !== 'undefined'){\n        dao.retrieveOneAppointmentByDoctorId(new Doctor(req.query.doctor_id)).then(result=>{\n            res.status(200).send({\n                success:true,\n                result:result\n            })\n        }).catch(err=>{\n            if(err===NO_SUCH_CONTENT){\n                res.status(204).send({\n                    success:false,\n                    error:NO_SUCH_CONTENT\n                })\n                return\n            }\n            console.error(err)\n            res.status(500).send({\n                success:false,\n                error:SOMETHING_WENT_WRONG\n            })\n        })\n    }else if(typeof req.query.date1 !=='undefined' &&\n             typeof req.query.date2 !=='undefined'){\n        dao.retrieveAppointmentsBetweenDates(req.query.date1,req.query.date2).then(result=>{\n            res.status(200).send({\n                success:true,\n                result:result\n            })\n        }).catch(err=>{\n            if(err===NO_SUCH_CONTENT){\n                res.status(204).send({\n                    success:false,\n                    error:NO_SUCH_CONTENT\n                })\n                return\n            }\n            console.error(err)\n            res.status(500).send({\n                success:false,\n                error:SOMETHING_WENT_WRONG\n            })\n        })\n    }else if(typeof req.query.doctor_id !== 'undefined' &&\n             typeof req.query.date1 !== 'undefined' &&\n             typeof req.query.date2 !== 'undefined'){\n        dao.retrieveAppointmentByDoctorAndBetweenDates(req.query.doctor_id,req.query.date1,req.query.date2).then(result=>{\n            res.status(200).send({\n                success:true,\n                result:result\n            })\n        }).catch(err=>{\n            if(err===NO_SUCH_CONTENT){\n                res.status(204).send({\n                    success:false,\n                    error:NO_SUCH_CONTENT\n                })\n                return\n            }\n            console.error(err)\n            res.status(500).send({\n                success:false,\n                error:SOMETHING_WENT_WRONG\n            })\n        })\n    }else if(typeof req.query.doctor_name!=='undefined'){\n        const doctor=new Doctor(null,req.query.doctor_name)\n        dao.retrieveAppointmentByDoctorName(doctor).then(result=>{\n            res.status(200).send({\n                success:true,\n                result:result\n            })\n        }).catch(error=>{\n            if(error===NO_SUCH_CONTENT){\n                res.status(204).send({\n                    success:false,\n                    error:NO_SUCH_CONTENT\n                })\n                return\n            }\n            console.error(error)\n            res.status(500).send({\n                success:false,\n                error:SOMETHING_WENT_WRONG\n            })\n        })\n    }\n    else{\n        const appointment=new Appointment(req.query.id,null,null,null,null)\n        dao.retrieveOneAppointment(appointment).then(result=>{\n            res.status(200).send({\n                success:true,\n                result:result\n            })\n        }).catch(err=>{\n            if(err===NO_SUCH_CONTENT){\n                res.status(204).send({\n                    success:false,\n                    error:NO_SUCH_CONTENT\n                })\n                return\n            }\n            console.error(err)\n            res.status(500).send({\n                success:false,\n                error:SOMETHING_WENT_WRONG\n            })\n        })\n    }\n})\n\napp.post(\"/api/user/add-appointment\", (req,res)=>{\n    if(typeof req.body.appointment_name === 'undefined' ||\n        typeof req.body.appointment_time === 'undefined' ||\n        typeof req.body.is_real_appointment==='undefined' ||\n        typeof req.body.doctor_id==='undefined'){\n        res.status(400).send({\n            success:false,\n            error:WRONG_BODY_FORMAT\n        })\n        return\n    }\n\n    const appointment=new Appointment(null,\n        req.body.appointment_name.toUpperCase(),\n        req.body.appointment_time,\n        req.body.duration, req.body.user_id,\n        req.body.is_real_appointment,\n        req.body.patient_id,\n        req.body.doctor_id,\n        'PENDING',\n        req.body.description)\n\n    if(typeof req.body.user_id !== 'undefined' &&\n       typeof req.body.patient_id !== 'undefined'){\n        dao.retrieveOneUser(new User(req.body.user_id)).then(result=>{\n            dao.retrieveOnePatient(new Patient(req.body.patient_id)).then(result=>{\n                dao.retrieveOneDoctor(new Doctor(req.body.doctor_id)).then(result=>{\n                    dao.addAppointment(appointment).then(result=>{\n                        res.status(200).send({\n                            success:true,\n                            result:result\n                        })\n                    }).catch(err=>{\n                        console.error(err)\n                        res.status(500).send({\n                            success:false,\n                            error:SOMETHING_WENT_WRONG\n                        })\n                    })\n                }).catch(error=>{\n                    if(error===NO_SUCH_CONTENT){\n                        res.status(204).send({\n                            success:false,\n                            error:NO_SUCH_CONTENT\n                        })\n                        return\n                    }\n\n                    console.error(error)\n                    res.status(500).send({\n                        success:false,\n                        error:SOMETHING_WENT_WRONG\n                    })\n                })\n            }).catch(error=>{\n                if(error===NO_SUCH_CONTENT){\n                    res.status(204).send({\n                        success:false,\n                        error:NO_SUCH_CONTENT\n                    })\n                    return\n                }\n\n                console.error(error)\n                res.status(500).send({\n                    success:false,\n                    error:SOMETHING_WENT_WRONG\n                })\n            })\n        }).catch(error=>{\n            if(error===NO_SUCH_CONTENT){\n                res.status(204).send({\n                    success:false,\n                    error:NO_SUCH_CONTENT\n                })\n                return\n            }\n\n            console.error(error)\n            res.status(500).send({\n                success:false,\n                error:SOMETHING_WENT_WRONG\n            })\n        })\n        return\n    }\n\n    dao.retrieveOneDoctor(new Doctor(req.body.doctor_id)).then(result=>{\n        dao.addAppointment(appointment).then(result=>{\n            res.status(200).send({\n                success:true,\n                result:result\n            })\n        }).catch(err=>{\n            console.error(err)\n            res.status(500).send({\n                success:false,\n                error:SOMETHING_WENT_WRONG\n            })\n        })\n    }).catch(error=>{\n        if(error===NO_SUCH_CONTENT){\n            res.status(204).send({\n                success:false,\n                error:NO_SUCH_CONTENT\n            })\n            return\n        }\n\n        console.error(error)\n        res.status(500).send({\n            success:false,\n            error:SOMETHING_WENT_WRONG\n        })\n    })\n})\n\napp.post(\"/api/user/add-appointment-description\",(req,res)=>{\n    if(typeof req.body.id==='undefined' ||\n        typeof req.body.description==='undefined'){\n        res.status(400).send({\n            success:false,\n            error:WRONG_BODY_FORMAT\n        })\n        return\n    }\n\n    dao.retrieveOneAppointment(new Appointment(req.body.id)).then(result=>{\n        dao.addAppointmentDescription(req.body.id,req.body.description).then(result=>{\n            res.status(200).send({\n                success:true,\n                result:result\n            })\n        }).catch(error=>{\n            console.error(error)\n            res.status(500).send({\n                success:false,\n                error:SOMETHING_WENT_WRONG\n            })\n        })\n    }).catch(error=>{\n        if(error===NO_SUCH_CONTENT){\n            res.status(204).send({\n                success:false,\n                error:NO_SUCH_CONTENT\n            })\n            return\n        }\n        console.error(error)\n        res.status(500).send({\n            success:false,\n            error:SOMETHING_WENT_WRONG\n        })\n    })\n})\n\napp.post(\"/api/user/update-appointment\", (req,res)=>{\n    if(typeof req.body.id==='undefined' ||\n        typeof req.body.appointment_name==='undefined' ||\n        typeof req.body.is_real_appointment==='undefined' ||\n        typeof req.body.doctor_id==='undefined'){\n        res.status(400).send({\n            success:false,\n            error:WRONG_BODY_FORMAT\n        })\n        return\n    }\n\n    const appointment=new Appointment(req.body.id,\n        req.body.appointment_name,\n        null,\n        null,\n        req.body.user_id,\n        req.body.is_real_appointment,\n        req.body.patient_id,\n        req.body.doctor_id,\n        'UPDATED')\n\n    if(typeof req.body.user_id !== 'undefined' &&\n        typeof req.body.patient_id !== 'undefined'){\n        dao.getAppointmentId(new Appointment(req.body.id)).then(result=>{\n            dao.retrieveOneUser(new User(req.body.user_id)).then(result=>{\n                dao.retrieveOnePatient(new Patient(req.body.patient_id)).then(result=>{\n                    dao.retrieveOneDoctor(new Doctor(req.body.doctor_id)).then(result=>{\n                        dao.updateAppointment(appointment).then(result=>{\n                            res.status(200).send({\n                                success:true,\n                                result:result\n                            })\n                        }).catch(err=>{\n                            console.error(err)\n                            res.status(500).send({\n                                success:false,\n                                error:SOMETHING_WENT_WRONG\n                            })\n                        })\n                    }).catch(error=>{\n                        if(error===NO_SUCH_CONTENT){\n                            res.status(204).send({\n                                success:false,\n                                error:NO_SUCH_CONTENT\n                            })\n                            return\n                        }\n                        console.error(error)\n                        res.status(500).send({\n                            success:false,\n                            error:SOMETHING_WENT_WRONG\n                        })\n                    })\n                }).catch(error=>{\n                    if(error===NO_SUCH_CONTENT){\n                        res.status(204).send({\n                            success:false,\n                            error:NO_SUCH_CONTENT\n                        })\n                        return\n                    }\n\n                    console.error(error)\n                    res.status(500).send({\n                        success:false,\n                        error:SOMETHING_WENT_WRONG\n                    })\n                })\n            }).catch(error=>{\n                if(error===NO_SUCH_CONTENT){\n                    res.status(204).send({\n                        success:false,\n                        error:NO_SUCH_CONTENT\n                    })\n                    return\n                }\n\n                console.error(error)\n                res.status(500).send({\n                    success:false,\n                    error:SOMETHING_WENT_WRONG\n                })\n            })\n        }).catch(error=>{\n            if(error===NO_SUCH_CONTENT){\n                res.status(204).send({\n                    success:false,\n                    error:NO_SUCH_CONTENT\n                })\n                return\n            }\n\n            console.error(err)\n            res.status(500).send({\n                success:false,\n                error:SOMETHING_WENT_WRONG\n            })\n        })\n        return\n    }\n\n    dao.retrieveOneDoctor(new Doctor(req.body.doctor_id)).then(result=>{\n        dao.updateAppointment(appointment).then(result=>{\n            res.status(200).send({\n                success:true,\n                result:result\n            })\n        }).catch(err=>{\n            console.error(err)\n            res.status(500).send({\n                success:false,\n                error:SOMETHING_WENT_WRONG\n            })\n        })\n    }).catch(error=>{\n        if(error===NO_SUCH_CONTENT){\n            res.status(204).send({\n                success:false,\n                error:NO_SUCH_CONTENT\n            })\n            return\n        }\n\n        console.error(error)\n        res.status(500).send({\n            success:false,\n            error:SOMETHING_WENT_WRONG\n        })\n    })\n})\n\napp.post(\"/api/user/reschedule-appointment\",(req,res)=>{\n    if(typeof req.body.id==='undefined' ||\n       typeof req.body.appointment_time==='undefined' ||\n       typeof req.body.duration==='undefined'){\n        res.status(400).send({\n            success:false,\n            error:WRONG_BODY_FORMAT\n        })\n        return\n    }\n\n    const appointment=new Appointment(req.body.id,null,req.body.appointment_time,req.body.duration,null,\n        null,null,null,'RESCHEDULED')\n    dao.getAppointmentId(new Appointment(req.body.id)).then(result=>{\n        dao.rescheduleAppointment(appointment).then(result=>{\n            res.status(200).send({\n                success:true,\n                result:result\n            })\n        }).catch(error=>{\n            console.error(error)\n            res.status(500).send({\n                success:false,\n                error:SOMETHING_WENT_WRONG\n            })\n        })\n    }).catch(error=>{\n        if(error===NO_SUCH_CONTENT){\n            res.status(204).send({\n                success:false,\n                error:NO_SUCH_CONTENT\n            })\n            return\n        }\n\n        console.error(error)\n        res.status(500).send({\n            success:false,\n            error:SOMETHING_WENT_WRONG\n        })\n    })\n})\n\napp.post(\"/api/user/approve-appointment\",(req,res)=>{\n    if(typeof req.body.id==='undefined' ||\n       typeof req.body.appointment_time==='undefined' ||\n       typeof req.body.duration==='undefined'){\n        res.status(400).send({\n            success:false,\n            error:WRONG_BODY_FORMAT\n        })\n        return\n    }\n\n    const appointment=new Appointment(req.body.id,null,req.body.appointment_time,req.body.duration,null,null)\n    dao.retrieveOneAppointment(new Appointment(req.body.id)).then(appointmentResult=>{\n        if(appointmentResult[0].appointment_status !== 'APPROVED' &&\n           appointmentResult[0].appointment_status !== 'DECLINED' &&\n            appointmentResult[0].appointment_status !== 'FINISHED' &&\n            appointmentResult[0].appointment_status !== 'DELETED'){\n            dao.approveAppointment(appointment).then(result=>{\n                res.status(200).send({\n                    success:true,\n                    result:result\n                })\n            }).catch(error=>{\n                console.error(error)\n                res.status(500).send({\n                    success:false,\n                    error:SOMETHING_WENT_WRONG\n                })\n            })\n            return\n        }\n        res.status(204).send({\n            success:false,\n            error:NO_SUCH_CONTENT\n        })\n    }).catch(error=>{\n        if(error===NO_SUCH_CONTENT){\n            res.status(204).send({\n                success:false,\n                error:NO_SUCH_CONTENT\n            })\n            return\n        }\n        console.error(error)\n        res.status(500).send({\n            success:false,\n            error:SOMETHING_WENT_WRONG\n        })\n    })\n})\n\napp.post(\"/api/user/decline-appointment\",(req,res)=>{\n    if(typeof req.body.id==='undefined'){\n        res.status(400).send({\n            success:false,\n            error:WRONG_BODY_FORMAT\n        })\n        return\n    }\n    const appointment=new Appointment(req.body.id,null,null,null,null,null)\n    dao.retrieveOneAppointment(appointment).then(appointmentResult=>{\n        if(appointmentResult[0].appointment_status !== 'APPROVED' &&\n            appointmentResult[0].appointment_status !== 'DECLINED' &&\n            appointmentResult[0].appointment_status !== 'FINISHED'){\n            dao.declineAppointment(appointment).then(result=>{\n                res.status(200).send({\n                    success:true,\n                    result:result\n                })\n            }).catch(error=>{\n                console.error(error)\n                res.status(500).send({\n                    success:false,\n                    error:SOMETHING_WENT_WRONG\n                })\n            })\n            return\n        }\n        res.status(204).send({\n            success:false,\n            error:NO_SUCH_CONTENT\n        })\n    }).catch(error=>{\n        if(error===NO_SUCH_CONTENT){\n            res.status(204).send({\n                success:false,\n                error:NO_SUCH_CONTENT\n            })\n            return\n        }\n        console.error(error)\n        res.status(500).send({\n            success:false,\n            error:SOMETHING_WENT_WRONG\n        })\n    })\n})\n\napp.post(\"/api/user/finish-appointment\",(req,res)=>{\n    if(typeof req.body.id==='undefined'){\n        res.status(400).send({\n            success:false,\n            error:WRONG_BODY_FORMAT\n        })\n        return\n    }\n\n    const appointment=new Appointment(req.body.id,null,null,null,null,null)\n    dao.retrieveOneAppointment(appointment).then(appointmentResult=>{\n        if(appointmentResult[0].appointment_status === 'APPROVED'){\n            dao.finishAppointment(appointment).then(result=>{\n                res.status(200).send({\n                    success:true,\n                    result:result\n                })\n            }).catch(error=>{\n                console.error(error)\n                res.status(500).send({\n                    success:false,\n                    error:SOMETHING_WENT_WRONG\n                })\n            })\n            return\n        }\n        res.status(204).send({\n            success:false,\n            error:NO_SUCH_CONTENT\n        })\n    }).catch(error=>{\n        if(error===NO_SUCH_CONTENT){\n            res.status(204).send({\n                success:false,\n                error:NO_SUCH_CONTENT\n            })\n            return\n        }\n        console.error(error)\n        res.status(500).send({\n            success:false,\n            error:SOMETHING_WENT_WRONG\n        })\n    })\n})\n\napp.post(\"/api/user/cancel-appointment\", (req,res)=>{\n    if(typeof req.body.id==='undefined'){\n        res.status(400).send({\n            success:false,\n            error:WRONG_BODY_FORMAT\n        })\n        return\n    }\n\n    dao.retrieveOneAppointment(new Appointment(req.body.id)).then(appointmentResult=>{\n        if(appointmentResult[0].appointment_status !== 'APPROVED' &&\n            appointmentResult[0].appointment_status !== 'DECLINED' &&\n            appointmentResult[0].appointment_status !== 'FINISHED'){\n            dao.cancelAppointment(new Appointment(req.body.id)).then(result=>{\n                res.status(200).send({\n                    success:true,\n                    result:result\n                })\n            }).catch(error=>{\n                console.error(error)\n                res.status(500).send({\n                    success:false,\n                    error:SOMETHING_WENT_WRONG\n                })\n            })\n            return\n        }\n        res.status(204).send({\n            success:false,\n            error:NO_SUCH_CONTENT\n        })\n    }).catch(error=>{\n        if(error===NO_SUCH_CONTENT){\n            res.status(204).send({\n                success:false,\n                error:NO_SUCH_CONTENT\n            })\n            return\n        }\n        console.error(error)\n        res.status(500).send({\n            success:false,\n            error:SOMETHING_WENT_WRONG\n        })\n    })\n})\n\napp.delete(\"/api/user/delete-appointment\", (req,res)=>{\n    if(typeof req.query.id==='undefined'){\n        res.status(400).send({\n            success:false,\n            error:WRONG_BODY_FORMAT\n        })\n        return\n    }\n\n    const appointment=new Appointment(req.query.id,null,null,null,null)\n    dao.deleteAppointment(appointment).then(result=>{\n        res.status(200).send({\n            success:true,\n            result:result\n        })\n    }).catch(err=>{\n        console.error(err)\n        res.status(500).send({\n            success:false,\n            error:SOMETHING_WENT_WRONG\n        })\n    })\n})\n\napp.get(\"/api/user/retrieve-participants\",(req,res)=>{\n    if(typeof req.query.id==='undefined'){\n        dao.retrieveParticipants().then(result=>{\n            res.status(200).send({\n                success:true,\n                result:result\n            })\n        }).catch(error=>{\n            console.error(error)\n            res.status(500).send({\n                success:false,\n                error:SOMETHING_WENT_WRONG\n            })\n        })\n    }else{\n        dao.retrieveOneParticipant(new Participant(req.query.id)).then(result=>{\n            res.status(200).send({\n                success:true,\n                result:result\n            })\n        }).catch(error=>{\n            if(error===NO_SUCH_CONTENT){\n                res.status(204).send({\n                    success:false,\n                    error:NO_SUCH_CONTENT\n                })\n                return\n            }\n            console.error(error)\n            res.status(500).send({\n                success:false,\n                error:SOMETHING_WENT_WRONG\n            })\n        })\n    }\n})\n\napp.post(\"/api/user/register-participant\",(req,res)=>{\n    if(typeof req.body.youtube_name==='undefined' ||\n       typeof req.body.youtube_email==='undefined' ||\n       typeof req.body.phone_number==='undefined' ||\n       typeof req.body.full_name==='undefined'){\n        res.status(400).send({\n            success:false,\n            error:WRONG_BODY_FORMAT\n        })\n        return\n    }\n    const participant=new Participant(null,req.body.full_name,req.body.youtube_name,req.body.youtube_email,req.body.phone_number)\n\n    dao.registerParticipant(participant).then(result=>{\n        res.status(200).send({\n            success:true,\n            result:result\n        })\n    }).catch(error=>{\n        console.error(error)\n        res.status(500).send({\n            success:false,\n            error:SOMETHING_WENT_WRONG\n        })\n    })\n})\n\napp.post(\"/api/user/update-participant\",(req,res)=>{\n    if(typeof req.body.youtube_name==='undefined' ||\n        typeof req.body.youtube_email==='undefined' ||\n        typeof req.body.phone_number==='undefined' ||\n        typeof req.body.full_name==='undefined' ||\n        typeof req.body.id==='undefined'){\n        res.status(400).send({\n            success:false,\n            error:WRONG_BODY_FORMAT\n        })\n        return\n    }\n    const participant=new Participant(req.body.id,req.body.full_name,req.body.youtube_name,req.body.youtube_email,req.body.phone_number)\n\n    dao.retrieveOneParticipant(new Participant(req.body.id)).then(result=>{\n        dao.updateParticipant(participant).then(result=>{\n            res.status(200).send({\n                success:true,\n                result:result\n            })\n        }).catch(error=>{\n            console.error(error)\n            res.status(500).send({\n                success:false,\n                error:SOMETHING_WENT_WRONG\n            })\n        })\n    }).catch(error=>{\n        if(error===NO_SUCH_CONTENT){\n            res.status(204).send({\n                success:false,\n                error:NO_SUCH_CONTENT\n            })\n            return\n        }\n        console.error(error)\n        res.status(500).send({\n            success:false,\n            error:SOMETHING_WENT_WRONG\n        })\n    })\n})\n\napp.delete(\"/api/user/delete-participant\",(req,res)=>{\n    if(typeof req.query.id==='undefined'){\n        res.status(400).send({\n            success:false,\n            error:WRONG_BODY_FORMAT\n        })\n        return\n    }\n\n    dao.retrieveOneParticipant(new Participant(req.query.id)).then(result=>{\n        dao.deleteParticipant(new Participant(req.query.id)).then(result=>{\n            res.status(200).send({\n                success:true,\n                result:result\n            })\n        }).catch(error=>{\n            console.error(error)\n            res.status(500).send({\n                success:flase,\n                error:SOMETHING_WENT_WRONG\n            })\n        })\n    }).catch(error=>{\n        if(error===NO_SUCH_CONTENT){\n            res.status(204).send({\n                success:false,\n                error:NO_SUCH_CONTENT\n            })\n            return\n        }\n        console.error(error)\n        res.status(500).send({\n            success:false,\n            error:SOMETHING_WENT_WRONG\n        })\n    })\n})\n\n/*\n / RETRIEVE MEDICAL RECORD\n / RETURN MEDICAL_RECORD_ITSELF + FILENAMES\n / { medical_record_id : x, case_open_time: x, attachments: [{filename: x1}, {filename:x2}] }\n */\n\n/*\nDIAGNOSA-SENDIRI/SELF-DIAGNOSE, TERJADWAL DENGAN KLINIK/SCHEDULED WITH CLINIC, TELAH DI-DIAGNOSA DOKTER/DIAGNOSED BY THE DOCTOR, RAWAT INAP/INPATIENT, SELESAI/DONE\n */\n\n// LISTEN SERVER | PRODUCTION DEPRECATION AFTER 9TH MARCH 2020, USE ONLY FOR DEVELOPMENT\napp.listen(PORT, ()=>{\n    console.info(`Server serving port ${PORT}`)\n})\n\n// SSL Certs for codedoc.xyz\nvar privateKey  = fs.readFileSync('sslcerts/privkey.pem', 'utf8');\nvar certificate = fs.readFileSync('sslcerts/fullchain.pem', 'utf8');\nvar credentials = {key: privateKey, cert: certificate};\nconst https = require('https')\nconst httpsServer = https.createServer(credentials, app);\nhttpsServer.listen(8485)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- user_module/app.js	(revision 7316d500e38901bc5a2538f4ca8ef49dec0a3e4a)
+++ user_module/app.js	(date 1613797567188)
@@ -4,7 +4,8 @@
 import dotenv from 'dotenv';
 import cors from 'cors';
 import path from 'path';
-import jsonwebtoken from 'jsonwebtoken';
+import multer from "multer";
+import moment from "moment";
 import {Dao} from "./dao";
 import {
     ERROR_DUPLICATE_ENTRY, ERROR_FOREIGN_KEY, NO_SUCH_CONTENT,
@@ -21,9 +22,6 @@
     Symptoms, TreatmentPlan,
     User
 } from "../model";
-import multer from "multer";
-import moment from "moment";
-import * as util from "util";
 
 dotenv.config();
 
